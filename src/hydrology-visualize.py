#! /usr/bin/env python

import matplotlib.pyplot as plt
import argparse
import numpy as np
import shapely.geometry as geom
from multiprocessing import Process, Pipe, Queue
import rasterio
from rasterio.transform import Affine
from tqdm import trange
import cv2 as cv
import networkx as nx
from scipy.spatial import voronoi_plot_2d

import DataModel
import SaveFile
import Math

parser = argparse.ArgumentParser(
    description='Implementation of Genevaux et al., "Terrain Generation Using Procedural Models Based on Hydrology", ACM Transactions on Graphics, 2013'
)
parser.add_argument(
    '-g',
    '--gamma',
    help='An outline of the shore. Should be a grayscale image (but that doesn\'t have to be the actual color model)',
    dest='inputDomain',
    metavar='gamma.png',
    required=True
)
parser.add_argument(
    '-ro',
    '--output-resolution',
    help='The number of pixels/samples on each side of the output raster',
    dest='outputResolution',
    metavar='1000',
    required=True
)
parser.add_argument(
    '--num-procs',
    help='The number of processes/threads to use in rendering. This should be the number of cores you have on your system.',
    dest='num_procs',
    metavar='4',
    default=4,
    required=False
)
parser.add_argument(
    '-o',
    '--output-dir',
    help='Folder in which to dump all the data generated by this program (including debug data)',
    dest='outputDir',
    metavar='output/',
    required=True
)
parser.add_argument(
    '--lat',
    help='Center latitude for the output GeoTIFF',
    dest='latitude',
    metavar='43.2',
    required=True
)
parser.add_argument(
    '--lon',
    help='Center longitude for the output GeoTIFF',
    dest='longitude',
    metavar='-103.8',
    required=True
)
parser.add_argument(
    '--debug-dpi',
    help='Manually specify the resolution of the debug images. Use for high-resolution inputs',
    dest='debugdpi',
    metavar='500',
    default=100,
    required=False
)
parser.add_argument(
    '--label-cells',
    help='Include if you want cells in debug images be labeled',
    action='store_false',
    dest='labelCells',
    required=False
)
args = parser.parse_args()

outputDir = args.outputDir + '/'
outputResolution = int(args.outputResolution) # in pixels
numProcs = int(args.num_procs)
latitude = float(args.latitude)
longitude = float(args.longitude)
debugdpi = int(args.debugdpi)
labelCells = args.labelCells

imgOutline = cv.imread(args.inputDomain)

resolution, edgeLength, shore, hydrology, cells, Ts = SaveFile.readDataModel('example/out/data')

imStretch = (0,int(shore.rasterShape[1]*resolution),int(shore.rasterShape[0]*resolution),0) # used to stretch debug images

imgMouthDots = imgOutline.copy()
for node in hydrology.allMouthNodes():
    cv.circle(imgMouthDots, (int(node.x()/resolution),int(node.y()/resolution)), int((shore.rasterShape[0]/512)*10), (255,0,0), -1)
plt.imshow(imgMouthDots)
plt.tight_layout()                                # DEBUG
plt.savefig(outputDir + '3-riverMouths.png', dpi=debugdpi)

pos = [node.position for node in hydrology.allNodes()]
labels = dict(zip(range(len(hydrology)),range(len(hydrology))))
imgRiverHeights = np.zeros(shore.rasterShape,dtype=np.uint16)
for n in range(len(hydrology)):
    if cells.vor_region_id(n) == -1:
        continue
    positions = [(int(p[0]/resolution),int(p[1]/resolution)) for p in cells.ridgePositions(n)]
    #print(f'Node ID: {n}, Positions: {positions}')
    cv.fillPoly(
        imgRiverHeights,
        DataModel.openCVFillPolyArray(positions),
        np.int16(hydrology.node(n).elevation).item()
    )

# DEBUG
fig = plt.figure(figsize=(20,20))
ax = fig.add_subplot(111)
ax.imshow(imgOutline, extent=imStretch)
ylim=ax.get_ylim();
xlim=ax.get_xlim();

if labelCells:
    nx.draw(hydrology.graph,pos,node_size=1,labels=labels,ax=ax)
else:
    nx.draw(hydrology.graph,pos,node_size=1,ax=ax)
voronoi_plot_2d(cells.vor, point_size=1, ax=ax,line_colors=['yellow'], show_vertices=False) # draws the voronoi cells?
ax.set_ylim(ylim);
ax.set_xlim(xlim);
kernel = cv.getStructuringElement(cv.MORPH_RECT,(2,2))#I have no idea what this is, and it isn't used anywhere else
plt.tight_layout()                                # DEBUG
plt.savefig(outputDir + '4-riverCellNetwork.png', dpi=debugdpi)
plt.clf()

# DEBUG
plt.imshow(cells.imgvoronoi)
plt.tight_layout()                                # DEBUG
plt.savefig(outputDir + '5-imgvoronoi.png', dpi=debugdpi)
plt.clf()

# DEBUG
plt.imshow(imgRiverHeights, cmap=plt.get_cmap('terrain'))
plt.colorbar()
plt.tight_layout()                                # DEBUG
plt.savefig(outputDir + '6-riverHeights.png', dpi=debugdpi)

### Breakdown of the image
# Giant red circles identify river mouths
# Blue dots identify river nodes
# Black arrows point upstream
# Black numbers identify the order of the nodes
# Green outline identifies the coast
# Yellow lines outline the voronoi cells around each river node
# Yellow dots identify the vertices of the voronoi cells

plt.figure(num=None, figsize=(16, 16), dpi=80)
nodes = hydrology.allNodes()
ids = [node.id for node in nodes]
positions = [node.position for node in nodes]
normalizer = max([node.flow for node in nodes])
weights = [6*u.flow/normalizer for u,v in hydrology.allEdges()]
plt.imshow(imgOutline, extent=imStretch)
if labelCells:
    nx.draw(hydrology.graph,positions,node_size=1,labels=labels,width=weights)
else:
    nx.draw(hydrology.graph,positions,node_size=1,width=weights)
plt.tight_layout()                                # DEBUG
plt.savefig(outputDir + '7-river-flow.png', dpi=debugdpi)


# DEBUG Same thing, but over imgvoronoi instead of the map

plt.figure(num=None, figsize=(16, 16), dpi=80)
plt.imshow(imgRiverHeights, plt.get_cmap('terrain'), extent=imStretch)
if labelCells:
    nx.draw(hydrology.graph,positions,node_size=60,labels=labels,width=weights)
else:
    nx.draw(hydrology.graph,positions,node_size=60,width=weights)
plt.tight_layout()                                # DEBUG
plt.savefig(outputDir + '8-river-flow-terrain.png', dpi=debugdpi)

fig = plt.figure(figsize=(20,20))
ax = fig.add_subplot(111)
ax.imshow(imgOutline, extent=imStretch)
ylim=ax.get_ylim();
xlim=ax.get_xlim();
voronoi_plot_2d(cells.vor, point_size=10, ax=ax,line_colors=['yellow'], show_vertices=False) # draws the voronoi cells?
ax.set_ylim(ylim);
ax.set_xlim(xlim);
for mouth in hydrology.allMouthNodes():
    for leaf in hydrology.allLeaves(mouth.id):
        x = [coord[0] for coord in leaf.rivers[0].coords]
        y = [coord[1] for coord in leaf.rivers[0].coords]
        plt.plot(x,y)
for node in hydrology.allNodes():
    plt.text(node.x(),node.y(),node.id)
plt.tight_layout()                                # DEBUG
plt.savefig(outputDir + '9-interpolatedRiverCellNetwork.png', dpi=debugdpi)

fig = plt.figure(figsize=(16,16))
ax = fig.add_subplot(111)
ax.imshow(imgOutline, extent=imStretch)
ax.scatter(*zip(*[t.position for t in Ts.allTs()]), c=[t.elevation for t in Ts.allTs()], cmap=plt.get_cmap('terrain'), s=5, lw=0)
ylim=ax.get_ylim();
xlim=ax.get_xlim();
if labelCells:
    nx.draw(hydrology.graph,positions,node_size=0,labels=labels,ax=ax)
else:
    nx.draw(hydrology.graph,positions,node_size=0,ax=ax)
voronoi_plot_2d(cells.vor, point_size=1, ax=ax,line_colors=['yellow'], show_vertices=False)
ax.set_ylim(ylim);
ax.set_xlim(xlim);
plt.tight_layout()                                # DEBUG
plt.savefig(outputDir + 'a-terrain-primitives.png', dpi=debugdpi)
